{"name":"Miij","tagline":"Miij is a Java framework with an intuitive and straight forward layout manager (FlexLayout) and some other utility classes.","body":"Miij-Framework\r\n====\r\n\r\nMiij is a Java framework with an intuitive and straight forward layout manager (FlexLayout)\r\nand some other utility classes.\r\nThe layout manager FlexLayout is very easy to use. Just add the layout to the JPanel (or any other container):\r\n```java\r\n   JPanel pnl = new JPanel();\r\n   pnl.setLayout(new FlexLayout());\r\n```\r\n\r\nThe FlexLayout works like you would naturally position your components. You start positioning the corner positions of\r\na component. Maybe you want a JLabel to be 10px away from the left side of your panel as well as from the top side.\r\nIt's width is 200px and it' height 25px. All this can be done in one simple self explaining line:\r\n```java\r\n   JLabel lbl = new JLabel(\"some text:\");\r\n   // ...\r\n   pnl.add(lbl, new FlexConstraint().left(10).top(10).width(100).height(25));\r\n```\r\n\r\nYou can also specify dependencies on components. Let's say we want a text field to be next to the JLabel with a gap of 10px\r\nbetween them:\r\n```java\r\n   JTextField txt = new JTextField();\r\n   // ...\r\n   // Position the component txt next to the right side of the component lbl with a gap of 10px between them.\r\n   // The right corner of the text field shall be 10 pixel beside the right side of the JPanel.\r\n   pnl.add(txt, new FlexConstraint().left(lbl, M.RIGHT, 10).top(10).right(10).height(25));\r\n```\r\nThe class **M** holds the constants for the Layout.\r\n\r\nYou are able to recalculate the corners and width and height individually and define a listener for recalculation\r\n(in case of resizing the parent container):\r\n```java\r\n   pnl.add(new JTextArea(), new FlexConstraint().left(10).top(txt, M.BOTTOM, 10).width(new FlexRecalculateListener() {\r\n   \t\t@Override\r\n\t\t\tpublic int recalculate()\r\n\t\t\t{\r\n\t\t\t\treturn lbl.getWidth() + 10 + txt.getWidth();\r\n\t\t\t}\r\n\t\t}));\r\n```\r\nNow every time the parent container is resized, the width of the text area will be recalculated!\r\n\r\nAnother feature is the notification about a component resize. You can define a listener, that will be called, if your\r\ncomponent is resizing:\r\n```java\r\n   pnl.add(new JLabel(), new FlexConstraint().left(10).right(10).top(10).bottom(10).notifyResize(new FlexNotifyResizeListener() {\r\n   \t\t@Override\r\n\t\t\tpublic void notifyResize(int newX, int newY, int newWidth, int newHeight)\r\n\t\t\t{\r\n\t\t\t\tSystem.out.println(\"my label has been resized!\");\r\n\t\t\t}\r\n\t\t}));\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}